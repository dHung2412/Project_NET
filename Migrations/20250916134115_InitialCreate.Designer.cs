// <auto-generated />
using System;
using InventoryManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventoryManagement.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20250916134115_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("MaximumStock")
                        .HasColumnType("int");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CurrentStock");

                    b.HasIndex("Name");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            Category = "Electronics",
                            CreatedAt = new DateTime(2025, 8, 17, 13, 41, 10, 344, DateTimeKind.Utc).AddTicks(9243),
                            CurrentStock = 25,
                            Description = "Laptop văn phòng hiệu năng cao với CPU Intel i5, RAM 8GB, SSD 256GB",
                            MaximumStock = 50,
                            MinimumStock = 5,
                            Name = "Laptop Dell Inspiron 15",
                            Price = 15000000m,
                            UpdatedAt = new DateTime(2025, 8, 17, 13, 41, 10, 344, DateTimeKind.Utc).AddTicks(9249)
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            Category = "Electronics",
                            CreatedAt = new DateTime(2025, 8, 22, 13, 41, 10, 344, DateTimeKind.Utc).AddTicks(9253),
                            CurrentStock = 8,
                            Description = "Chuột không dây ergonomic với độ chính xác cao",
                            MaximumStock = 100,
                            MinimumStock = 10,
                            Name = "Chuột không dây Logitech",
                            Price = 500000m,
                            UpdatedAt = new DateTime(2025, 8, 22, 13, 41, 10, 344, DateTimeKind.Utc).AddTicks(9253)
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            Category = "Electronics",
                            CreatedAt = new DateTime(2025, 8, 27, 13, 41, 10, 344, DateTimeKind.Utc).AddTicks(9255),
                            CurrentStock = 2,
                            Description = "Bàn phím cơ RGB với switch Cherry MX Blue",
                            MaximumStock = 30,
                            MinimumStock = 5,
                            Name = "Bàn phím cơ Gaming",
                            Price = 1200000m,
                            UpdatedAt = new DateTime(2025, 8, 27, 13, 41, 10, 344, DateTimeKind.Utc).AddTicks(9255)
                        });
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.StockTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("ProductId", "TransactionDate");

                    b.ToTable("StockTransactions");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.StockTransaction", b =>
                {
                    b.HasOne("InventoryManagement.Domain.Entities.Product", null)
                        .WithMany("StockTransactions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Product", b =>
                {
                    b.Navigation("StockTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
