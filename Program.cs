using Microsoft.EntityFrameworkCore;
using InventoryManagement.Infrastructure.Data;
using InventoryManagement.Infrastructure.Repositories;
using InventoryManagement.Infrastructure.AI;
using InventoryManagement.Domain.Interfaces;
using InventoryManagement.Application.Services;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();

// Database Configuration
builder.Services.AddDbContext<InventoryDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"),
    sqlOptions => sqlOptions.EnableRetryOnFailure()
    ));

// Repository Pattern & Unit of Work
builder.Services.AddScoped<IProductRepository, ProductRepository>();
builder.Services.AddScoped<IStockTransactionRepository, StockTransactionRepository>();
builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();

// AI Services (t√°ch module ri√™ng)
builder.Services.AddScoped<ICategoryPredictionService, CategoryPredictionService>();
builder.Services.AddScoped<IStockPredictionService, StockPredictionService>();
builder.Services.AddScoped<IProductDescriptionService, ProductDescriptionService>();

// Application Services
builder.Services.AddScoped<IProductService, ProductService>();
builder.Services.AddScoped<IAIService, AIService>();

// API Documentation
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new() 
    { 
        Title = "Inventory Management System API", 
        Version = "v1",
        Description = "H·ªá th·ªëng qu·∫£n l√Ω kho s·∫£n ph·∫©m k√®m AI h·ªó tr·ª£"
    });
    
    // Include XML comments
    var xmlFile = $"{System.Reflection.Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    if (File.Exists(xmlPath))
    {
        c.IncludeXmlComments(xmlPath);
    }
});

// CORS Policy
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", policy =>
    {
        policy.AllowAnyOrigin()
              .AllowAnyMethod()
              .AllowAnyHeader();
    });
});

// Logging
builder.Logging.ClearProviders();
builder.Logging.AddConsole();
builder.Logging.AddDebug();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "Inventory Management API V1");
        c.RoutePrefix = string.Empty; // Set Swagger UI at root
    });
}

app.UseHttpsRedirection();
app.UseCors("AllowAll");
app.UseAuthorization();
app.MapControllers();

// Database Migration and Seeding
using (var scope = app.Services.CreateScope())
{
    var context = scope.ServiceProvider.GetRequiredService<InventoryDbContext>();
    
    try
    {
        context.Database.Migrate();
        Console.WriteLine("Database initialized successfully!");
    }
    catch (Exception ex)
    {
        var logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();
        logger.LogError(ex, "An error occurred while initializing the database");
    }
}

Console.WriteLine("üöÄ Inventory Management System API is starting...");
Console.WriteLine("üìä Features:");
Console.WriteLine("   ‚Ä¢ CRUD s·∫£n ph·∫©m v·ªõi validation");
Console.WriteLine("   ‚Ä¢ Qu·∫£n l√Ω t·ªìn kho th√¥ng minh");
Console.WriteLine("   ‚Ä¢ AI g·ª£i √Ω danh m·ª•c s·∫£n ph·∫©m");
Console.WriteLine("   ‚Ä¢ AI d·ª± ƒëo√°n t·ªìn kho c·∫ßn nh·∫≠p");
Console.WriteLine("   ‚Ä¢ AI t·∫°o/c·∫£i thi·ªán m√¥ t·∫£ s·∫£n ph·∫©m");
Console.WriteLine("   ‚Ä¢ B√°o c√°o v√† ph√¢n t√≠ch xu h∆∞·ªõng");
Console.WriteLine("   ‚Ä¢ Clean Architecture v·ªõi DDD");
Console.WriteLine();

app.Run();